/// Autogenerated: 2019-12-03 22:58:58Z
#pragma once
#include "MSExcel.common.hpp"
#include "MSExcel.Rgce.hpp"


namespace OleStructuredStorage {
	namespace Excel {
		namespace Formulas {

			class Ptg {
			public:
				virtual unsigned int size() const = 0;
				virtual std::string to_string() const = 0;
			};

			class PtgUnknown : public Ptg {
			private:
				unsigned char type;
				unsigned char subtype;
			public:
				PtgUnknown(unsigned char type, unsigned char subtype) : type(type), subtype(subtype) {};
				unsigned int size() const override { return 1; }
				std::string to_string() const override { return "UnknownPTG(type=" + std::to_string(this->type) + ",subType=" + std::to_string(this->subtype) + ")"; }
			};

			class PtgBasic : public Ptg {
			private:
				unsigned char ptg : 7;
				unsigned char reserved : 1;
			public:
				unsigned int size() const override { return 1; }
				void Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					this->ptg = common::ExtractBits(buffer[offset], 7, 0);
					this->reserved = common::ExtractBits(buffer[offset], 1, 7);
				}
			};


			class PtgSubType : public Ptg {
			private:
				unsigned char ptg : 5;
				unsigned char type : 2;
				unsigned char reserved : 1;
			public:
				unsigned int size() const override { return 1; }
				void Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					this->ptg = common::ExtractBits(buffer[offset], 5, 0);
					this->type = common::ExtractBits(buffer[offset], 2, 5);
					this->reserved = common::ExtractBits(buffer[offset], 1, 7);
				}
			};

			class PtgBasic_elf : public Ptg {
			private:
				unsigned char ptg;
				unsigned char eptg;
				RgceElfLoc loc;
			public:
				unsigned int size() const override { return 4; }
				void Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					this->ptg = buffer[offset];
					this->eptg = buffer[offset + 1];
					this->loc.Parse(buffer, offset + 2, max);
				}
			};

			class PtgSubType_ixti : public PtgSubType {
			private:
				unsigned short ixti;
			public:
				unsigned int size() const override { return PtgSubType::size() + 2; }
				void Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgSubType::Parse(buffer, offset, max);
					this->ixti = buffer[offset + PtgSubType::size()];
				}
			};


			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/27db2f45-11e8-4238-94ed-92fd9c5721fb
			// ptg=0x03
			// The PtgAdd structure specifies a binary-value-operator that adds the second expression in a binary-value-expression to the first.
			class PtgAdd : public PtgBasic {
			private:
				PtgAdd(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgAdd* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAdd* ans = new PtgAdd(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgAdd";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/b3c714c2-4fcf-4888-9e15-1cbf17e4d5d3
			// ptg=0x25 or 0x45 or 0x65
			// The PtgArea operand specifies a reference to a rectangular range of cells.
			class PtgArea : public PtgSubType {
			private:
				PtgArea(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				RgceArea area;
			public:
				static PtgArea* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgArea* ans = new PtgArea(buffer, offset, max);
					ans->area.Parse(buffer, offset + 1, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 8; }
				std::string to_string() const override {
					return "PtgArea(" + this->area.to_string() + ")";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/869033ad-6304-4b9a-b2ba-1e7794ae345a
			// ptg=0x3B or 0x5B or 0x7B
			// The PtgArea3d operand specifies a reference to the same rectangular range of cells on one or more sheets. If the formula (section 2.2.2) containing this structure is part of a revision as specified in the Formulas overview, then there MUST be a RevExtern in the RgbExtra corresponding to this PtgArea3d, which specifies those sheets.
			class PtgArea3d : public PtgSubType_ixti {
			private:
				PtgArea3d(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType_ixti::Parse(buffer, offset, max); }
				RgceArea area;
			public:
				static PtgArea3d* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgArea3d* ans = new PtgArea3d(buffer, offset, max);
					ans->area.Parse(buffer, offset + 3, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType_ixti::size() + 8; }
				std::string to_string() const override {
					return "PtgArea3d(" + this->area.to_string() + ")";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/bbc29b52-b581-4417-b18c-a4ac430a8dc0
			// ptg=0x2B or 0x4B or 0x6B
			// The PtgAreaErr operand specifies an invalid reference to a cell range.
			class PtgAreaErr : public PtgSubType {
			private:
				PtgAreaErr(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned short unused1;
				unsigned short unused2;
				unsigned short unused3;
				unsigned short unused4;
			public:
				static PtgAreaErr* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAreaErr* ans = new PtgAreaErr(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 8; }
				std::string to_string() const override {
					return "PtgAreaErr";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/e91dfca4-7b5e-4e44-86a5-e6621222a3a2
			// ptg=0x3D or  0x5D or  0x7D
			// The PtgAreaErr3d operand specifies an invalid reference to the same rectangular range of cells on one or more sheets. If the formula (section 2.2.2) containing this structure is part of a revision as specified in the Formulas overview, then there MUST be a RevExtern in the RgbExtra corresponding to this PtgAreaErr3d, which specifies those sheets.
			class PtgAreaErr3d : public PtgSubType_ixti {
			private:
				PtgAreaErr3d(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType_ixti::Parse(buffer, offset, max); }
				unsigned short unused1;
				unsigned short unused2;
				unsigned short unused3;
				unsigned short unused4;
			public:
				static PtgAreaErr3d* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAreaErr3d* ans = new PtgAreaErr3d(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType_ixti::size() + 8; }
				std::string to_string() const override {
					return "PtgAreaErr3d";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/f2c8529a-25b1-4c75-838b-a48ef6384f86
			// ptg=0x2D or 0x4D or 0x6D
			// The PtgAreaN operand specifies a reference to a rectangular range of cells as an RgceAreaRel.
			class PtgAreaN : public PtgSubType {
			private:
				PtgAreaN(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				RgceAreaRel area;
			public:
				static PtgAreaN* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAreaN* ans = new PtgAreaN(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 8; }
				std::string to_string() const override {
					return "PtgAreaN";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/61167ac8-b0ca-42e5-b82c-41a25d12324c
			// ptg=0x20 or  0x40 or  0x60
			// The PtgArray operand specifies an array of values. There MUST be a PtgExtraArray in the RgbExtra corresponding to this PtgArray. The correspondence between PtgArray and PtgExtraArray structures is specified in RgbExtra.
			class PtgArray : public PtgSubType {
			private:
				PtgArray(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned char unused1;
				unsigned short unused2;
				unsigned int unused3;
			public:
				static PtgArray* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgArray* ans = new PtgArray(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 7; }
				std::string to_string() const override {
					return "PtgArray";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/fcd76e10-6072-4dcf-b591-47edc8822792
			// ptg=0x19
			// The PtgAttrBaxcel structure specifies that the result of the Rgce is to be assigned to a local variable used in a macro sheet.
			class PtgAttrBaxcel : public PtgBasic {
			private:
				PtgAttrBaxcel(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char bitSemi : 1;
				unsigned char reserved2 : 4;
				unsigned char bitBaxcel : 1;
				unsigned char reserved3 : 2;
				unsigned short unused;
			public:
				static PtgAttrBaxcel* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAttrBaxcel* ans = new PtgAttrBaxcel(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2; }
				std::string to_string() const override {
					return "PtgAttrBaxcel";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/24fb579c-c65d-4771-94a8-4380cecdc8c8
			// ptg=0x19
			// The PtgAttrChoose structure specifies a control token.
			class PtgAttrChoose : public PtgBasic {
			private:
				PtgAttrChoose(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char reserved2 : 2;
				unsigned char bitChoose : 1;
				unsigned char rserved3 : 5;
				unsigned short cOffset;
				unsigned short* rgOffset;
			public:
				static PtgAttrChoose* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAttrChoose* ans = new PtgAttrChoose(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2 + this->cOffset; }
				std::string to_string() const override {
					return "PtgAttrChoose";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/081e17b9-02a6-4e78-ad28-09538f35a312
			// ptg=0x19
			// The PtgAttrGoto structure specifies a control token.
			class PtgAttrGoto : public PtgBasic {
			private:
				PtgAttrGoto(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char reserved2 : 3;
				unsigned char bitGoto : 1;
				unsigned char reservred3 : 4;
				unsigned short offset;
			public:
				static PtgAttrGoto* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAttrGoto* ans = new PtgAttrGoto(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2; }
				std::string to_string() const override {
					return "PtgAttrGoto";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/d81e5fb4-3004-409a-9a31-1a60662d9e59
			// ptg=0x19
			// The PtgAttrIf structure specifies a control token.
			class PtgAttrIf : public PtgBasic {
			private:
				PtgAttrIf(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char reserved2 : 1;
				unsigned char bitIf : 1;
				unsigned reserved3 : 6;
				unsigned short offset;
			public:
				static PtgAttrIf* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAttrIf* ans = new PtgAttrIf(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2; }
				std::string to_string() const override {
					return "PtgAttrIf";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/615c5518-010a-4268-b71b-b60074bdb11b
			// ptg=0x19
			// The PtgAttrSemi structure specifies that this Rgce is volatile.
			class PtgAttrSemi : public PtgBasic {
			private:
				PtgAttrSemi(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char bitSemi : 1;
				unsigned reserved2 : 7;
				unsigned short unused;
			public:
				static PtgAttrSemi* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAttrSemi* ans = new PtgAttrSemi(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2; }
				std::string to_string() const override {
					return "PtgAttrSemi";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/38a4d7be-040b-4206-b078-62f5aeec72f3
			// ptg=0x19
			// The PtgAttrSpace display token specifies a number of space or carriage return characters that are displayed around the expression in a display-precedence-expression.
			class PtgAttrSpace : public PtgBasic {
			private:
				PtgAttrSpace(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char reserved2 : 6;
				unsigned char bitSpace : 1;
				unsigned char reserved3 : 1;
				PtgAttrSpaceType type;
			public:
				static PtgAttrSpace* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAttrSpace* ans = new PtgAttrSpace(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2; }
				std::string to_string() const override {
					return "PtgAttrSpace";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/5d8c3df5-9be5-46d9-8105-a1a19ceca3d4
			// ptg=0x19
			// The PtgAttrSpaceSemi structure specifies a number of space or carriage return characters that are displayed around the expression in a display-precedence-specifier and that the Rgce is volatile.
			class PtgAttrSpaceSemi : public PtgBasic {
			private:
				PtgAttrSpaceSemi(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char reserved2;
				PtgAttrSpaceType type;
			public:
				static PtgAttrSpaceSemi* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAttrSpaceSemi* ans = new PtgAttrSpaceSemi(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2; }
				std::string to_string() const override {
					return "PtgAttrSpaceSemi";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/79ef57f6-27ab-4fec-b893-7dd727e771d1
			// ptg=0x19
			// The PtgAttrSum structure specifies the sum of an expression as defined in function-call.
			class PtgAttrSum : public PtgBasic {
			private:
				PtgAttrSum(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char reserved1 : 1;
				unsigned char reserved2 : 4;
				unsigned char bitSum : 1;
				unsigned char reserved4 : 3;
				unsigned short unused;
			public:
				static PtgAttrSum* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgAttrSum* ans = new PtgAttrSum(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2; }
				std::string to_string() const override {
					return "PtgAttrSum";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/d59e28db-4d6f-4c86-bcc9-c8a783e352ec
			// ptg=0x1D
			// The PtgBool operand specifies a Boolean value.
			class PtgBool : public PtgBasic {
			private:
				PtgBool(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned char boolean;
			public:
				static PtgBool* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgBool* ans = new PtgBool(buffer, offset, max);
					ans->boolean = buffer[offset + 1];
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 1; }
				std::string to_string() const override {
					std::ostringstream ss;
					ss << "PtgBool(";
					ss << std::boolalpha << this->boolean;
					ss << ")";
					return ss.str();					
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/054d699a-4383-4bbf-9df2-6a4020119c1e
			// ptg=0x08
			// The PtgConcat structure specifies a binary-value-operator that appends the second expression in binary-value-expression to the first.
			class PtgConcat : public PtgBasic {
			private:
				PtgConcat(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgConcat* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgConcat* ans = new PtgConcat(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgConcat";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/10585b24-618d-47f4-8ffa-65811d18ad13
			// ptg=0x06
			// The PtgDiv structure specifies a binary-value-operator that divides the first expression in a binary-value-expression by the second.
			class PtgDiv : public PtgBasic {
			private:
				PtgDiv(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgDiv* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgDiv* ans = new PtgDiv(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgDiv";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/c76517f7-6a4e-47e8-8087-6e927758bbed
			// ptg=0x18
			// The PtgElfCol natural language formula operand specifies a reference class reference to a range within a column which is represented by a single-cell natural language label.
			class PtgElfCol : public PtgBasic_elf {
			private:
				PtgElfCol(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
			public:
				static PtgElfCol* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfCol* ans = new PtgElfCol(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfCol";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/cc02acdf-f404-4318-9847-8d4cbf523966
			// ptg=0x18
			// The PtgElfColS natural language formula operand specifies a reference class reference to a range within a column that is identified by a multiple-cell natural language label. There MUST be a PtgExtraElf in the RgbExtra corresponding to this PtgElfColS. The correspondence between PtgElfColS and PtgExtraElf structures is specified in RgbExtra.
			class PtgElfColS : public PtgBasic_elf {
			private:
				PtgElfColS(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
			public:
				static PtgElfColS* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfColS* ans = new PtgElfColS(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfColS";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/6ed51fe3-4baf-4163-8851-888de8477525
			// ptg=0x18
			// The PtgElfColSV natural language formula operand specifies a value class reference to a range within a column that is identified by a multiple-cell natural language label. There MUST be a PtgExtraElf in the RgbExtra corresponding to this PtgElfColSV. The correspondence between PtgElfColSV and PtgExtraElf structures is specified in RgbExtra.
			class PtgElfColSV : public PtgBasic_elf {
			private:
				PtgElfColSV(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
			public:
				static PtgElfColSV* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfColSV* ans = new PtgElfColSV(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfColSV";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/167409e7-9363-4b61-9434-47e559e80f2d
			// ptg=0x18
			// The PtgElfColV natural language formula operand specifies a value class reference to a range within a column which is represented by a single-cell natural language label.
			class PtgElfColV : public PtgBasic_elf {
			private:
				PtgElfColV(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
			public:
				static PtgElfColV* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfColV* ans = new PtgElfColV(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfColV";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/67784d96-e87d-4f97-b643-f8f2176a6148
			// ptg=0x18
			// The PtgElfLel natural language formula operand specifies a reference to a range which is represented by a single-cell natural language label or a multiple-cell natural language label that has been deleted.?
			class PtgElfLel : public PtgBasic_elf {
			private:
				PtgElfLel(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
				unsigned short ilel;
				unsigned char fQuoted : 1;
			public:
				static PtgElfLel* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfLel* ans = new PtgElfLel(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfLel";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/dc352cde-62fc-4c68-99fd-186d6bc4d610
			// ptg=0x18
			// The PtgElfRadical natural language formula operand specifies a reference class reference to a range that is represented by a single-cell natural language label. The range is specified by PtgArea or PtgAreaErr that follows this PtgElfRadical in the formula (section 2.2.2). If this structure is followed in the formula by PtgArea, then one but not both of the following MUST be true:
			class PtgElfRadical : public PtgBasic_elf {
			private:
				PtgElfRadical(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
			public:
				static PtgElfRadical* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfRadical* ans = new PtgElfRadical(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfRadical";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/304191e6-2c82-4542-8477-a1ffd548442e
			// ptg=0x18
			// The PtgElfRadicalLel natural language formula operand specifies a reference class reference to a range which is represented by a single-cell natural language label or a multiple-cell natural language label that has been deleted.
			class PtgElfRadicalLel : public PtgBasic_elf {
			private:
				PtgElfRadicalLel(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
				unsigned short ilel;
				unsigned char fQuoted : 1;
			public:
				static PtgElfRadicalLel* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfRadicalLel* ans = new PtgElfRadicalLel(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfRadicalLel";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/e3112a89-f771-4043-82a9-18b3d4c1e137
			// ptg=0x18
			// The PtgElfRadicalS natural language formula operand specifies a reference class reference to a range which is represented by a multiple-cell natural language label. The range is specified by the PtgArea or PtgAreaErr record which follows this PtgElfRadicalS in the formula (section 2.2.2). There MUST be a PtgExtraElf in the RgbExtra corresponding to this PtgElfRadicalS. The correspondence between PtgElfRadicalS and PtgExtraElf structures is specified in RgbExtra.
			class PtgElfRadicalS : public PtgBasic_elf {
			private:
				PtgElfRadicalS(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
			public:
				static PtgElfRadicalS* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfRadicalS* ans = new PtgElfRadicalS(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfRadicalS";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/20348be6-68c6-4506-b744-fd38ec0aa675
			// ptg=0x18
			// The PtgElfRw natural language formula operand specifies a reference class reference to a range within a row which is represented by a single-cell natural language label.
			class PtgElfRw : public PtgBasic_elf {
			private:
				PtgElfRw(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
			public:
				static PtgElfRw* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfRw* ans = new PtgElfRw(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfRw";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/42e28815-da53-45ba-80f2-2a68ddbbfcf9
			// ptg=0x18
			// The PtgElfRwV natural language formula operand specifies a value class reference to a range within a row which is represented by a single-cell natural language label.
			class PtgElfRwV : public PtgBasic_elf {
			private:
				PtgElfRwV(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
			public:
				static PtgElfRwV* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgElfRwV* ans = new PtgElfRwV(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgElfRwV";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/d197275e-cb7f-455c-b9b5-7e968412d470
			// ptg=0x0B
			// The PtgEq structure specifies the comparison of whether the first expression is equal to the second expression.
			class PtgEq : public PtgBasic {
			private:
				PtgEq(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgEq* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgEq* ans = new PtgEq(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgEq";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/4746c46e-8301-4d72-aaa8-742f5404b5db
			// ptg=0x1C
			// The PtgErr operand specifies an error code.
			class PtgErr : public PtgBasic {
			private:
				PtgErr(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				BErr err;
			public:
				static PtgErr* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgErr* ans = new PtgErr(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 1; }
				std::string to_string() const override {
					return "PtgErr";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/f9aa266f-f1e9-4341-a232-e9f7ec94b8f1
			// ptg=0x01
			// The PtgExp structure specifies that the containing Rgce is part of an array formula (section 2.2.2) or shared formula and specifies the row and column of the cell in which that formula exists.
			class PtgExp : public PtgBasic {
			private:
				PtgExp(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned short row;
				unsigned short col;
			public:
				static PtgExp* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgExp* ans = new PtgExp(buffer, offset, max);
					ans->row = common::ReadUShort(buffer, max, offset + 1);
					ans->col = common::ReadUShort(buffer, max, offset + 3);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 4; }
				std::string to_string() const override {
					std::ostringstream ss;
					ss << "PtgExp(" << ColNumToName(this->col + 1) << this->row + 1 << ")";
					return ss.str();					
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/87ce512d-273a-4da0-a9f8-26cf1d93508d
			// ptg=0x21 or 0x41 or 0x61
			// The PtgFunc structure specifies a call to a function with a fixed number of parameters, as defined in function-call.
			class PtgFunc : public PtgSubType {
			private:
				PtgFunc(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned short iftab;
			public:
				static PtgFunc* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgFunc* ans = new PtgFunc(buffer, offset, max);
					ans->iftab = common::ReadUShort(buffer, max, offset + 1);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 2; }
				std::string to_string() const override {
					std::ostringstream ss;
					ss << "PtgFunc(" << GetFunctionName_FTab(this->iftab) << ")";
					return ss.str();
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/5d105171-6b73-4f40-a7cd-6bf2aae15e83
			// ptg=0x22 or 0x42 or 0x62
			// The PtgFuncVar structure specifies a call to a function with a variable number of parameters as defined in function-call.
			class PtgFuncVar : public PtgSubType {
			private:
				PtgFuncVar(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned char cparams;
				unsigned short tab : 15;
				unsigned char fCeFunc : 1;
			public:
				static PtgFuncVar* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgFuncVar* ans = new PtgFuncVar(buffer, offset, max);
					ans->cparams = buffer[offset + 1];
					ans->tab = common::ReadUShort(buffer, max, offset + 2) << 1 >> 1;
					ans->fCeFunc = common::ExtractBits(buffer[offset + 3], 1, 7);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 3; }
				std::string to_string() const override {
					std::ostringstream ss;
					ss << "PtgFuncVar(";
					if (this->fCeFunc == 1) {
						ss << GetFunctionName_CeTab(this->tab);
					} else {
						ss << GetFunctionName_FTab(this->tab);
					}
					ss << ")";
					return ss.str();
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/0185f97f-c731-4852-bd0d-0eb0d8b3457f
			// ptg=0x0C
			// The PtgGe structure specifies a binary-value-operator that compares whether the first expression in a binary-value-expression is greater than or equal to the second.
			class PtgGe : public PtgBasic {
			private:
				PtgGe(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgGe* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgGe* ans = new PtgGe(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgGe";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/08104e30-5fb6-467a-87ed-978eb456366c
			// ptg=0x0D
			// The PtgGt structure specifies a binary-value-operator that compares whether the first expression in a binary-value-expression is greater than the second.
			class PtgGt : public PtgBasic {
			private:
				PtgGt(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgGt* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgGt* ans = new PtgGt(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgGt";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/508ecf18-3b81-4628-95b3-7a9d2a295bca
			// ptg=0x1E
			// The PtgInt operand specifies an unsigned integer value.
			class PtgInt : public PtgBasic {
			private:
				PtgInt(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned short integer;
			public:
				static PtgInt* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgInt* ans = new PtgInt(buffer, offset, max);
					ans->integer = common::ReadUShort(buffer, max, offset + 1);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2; }
				std::string to_string() const override {
					return "PtgInt(" + std::to_string(this->integer) + ")";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/477524a5-86b9-474e-8955-9ea77d659d79
			// ptg=0x0F
			// The PtgIsect structure specifies a binary-reference-operator that intersects the first expression in a binary-reference-expression with the second.
			class PtgIsect : public PtgBasic {
			private:
				PtgIsect(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgIsect* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgIsect* ans = new PtgIsect(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgIsect";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/92c13f4d-89d3-45a9-a395-4643e5b27b1d
			// ptg=0x0A
			// The PtgLe structure specifies a binary-value-operator that compares whether the first expression in a binary-value-expression is less than or equal to the second.
			class PtgLe : public PtgBasic {
			private:
				PtgLe(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgLe* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgLe* ans = new PtgLe(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgLe";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/28de4981-1352-4a5e-a3b7-f15a8a6ce7fb
			// ptg=0x09
			// The PtgLt structure specifies a binary-value-operator that compares whether the first expression in a binary-value-expression is less than the second.
			class PtgLt : public PtgBasic {
			private:
				PtgLt(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgLt* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgLt* ans = new PtgLt(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgLt";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/078f34be-35cc-4abc-960b-34f48d4da6ee
			// ptg=0x26 or 0x46 or 0x66
			// The PtgMemArea mem token specifies that the result of a binary-reference-expression in a mem-area-expression is a range of cells. The RgbExtra corresponding to this structure MUST contain a PtgExtraMem that specifies the range of cells.
			class PtgMemArea : public PtgSubType {
			private:
				PtgMemArea(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned int unused;
				unsigned short cce;
			public:
				static PtgMemArea* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgMemArea* ans = new PtgMemArea(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 6; }
				std::string to_string() const override {
					return "PtgMemArea";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/2b3c0de0-14c8-436a-ae32-477c2a075c60
			// ptg=0x27 or 0x47 or 0x67
			// The PtgMemErr mem token specifies that the result of a binary-reference-expression in a mem-area-expression is an error code.
			class PtgMemErr : public PtgSubType {
			private:
				PtgMemErr(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				BErr err;
				unsigned char unused1;
				unsigned short unused2;
				unsigned short cce;
			public:
				static PtgMemErr* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgMemErr* ans = new PtgMemErr(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 6; }
				std::string to_string() const override {
					return "PtgMemErr";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/e4f8e3b4-0bb7-4100-99ee-1ac53acc9161
			// ptg=0x29 or 0x49 or 0x69
			// The PtgMemFunc mem token specifies that the result of a binary-reference-expression in a mem-area-expression is variable.
			class PtgMemFunc : public PtgSubType {
			private:
				PtgMemFunc(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned short cce;
			public:
				static PtgMemFunc* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgMemFunc* ans = new PtgMemFunc(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 2; }
				std::string to_string() const override {
					return "PtgMemFunc";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/dfa39d4c-b7cb-4bf7-b5e8-015b84fd6e48
			// ptg=0x28 or 0x48 or 0x68
			// The PtgMemNoMem mem token specifies that the result of the binary-reference-expression in a mem-area-expression failed to cache.
			class PtgMemNoMem : public PtgSubType {
			private:
				PtgMemNoMem(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned int unused;
				unsigned short cce;
			public:
				static PtgMemNoMem* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgMemNoMem* ans = new PtgMemNoMem(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 6; }
				std::string to_string() const override {
					return "PtgMemNoMem";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/69352e6c-e712-48d7-92d1-0bf7c1f61f69
			// ptg=0x16
			// The PtgMissArg operand specifies a missing value.
			class PtgMissArg : public PtgBasic {
			private:
				PtgMissArg(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgMissArg* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgMissArg* ans = new PtgMissArg(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgMissArg";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/52863fc5-3d3c-4874-90e6-a7961902849f
			// ptg=0x05
			// The PtgMul structure specifies a binary-value-operator that multiplies the first and second expressions in a binary-value-expression.
			class PtgMul : public PtgBasic {
			private:
				PtgMul(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgMul* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgMul* ans = new PtgMul(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgMul";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/5f05c166-dfe3-4bbf-85aa-31c09c0258c0
			// ptg=0x23 or 0x43 or 0x63
			// The PtgName operand specifies a reference to a defined name in the same workbook as the containing Rgce.
			class PtgName : public PtgSubType {
			private:
				PtgName(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned int nameindex;
			public:
				static PtgName* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgName* ans = new PtgName(buffer, offset, max);
					ans->nameindex = common::ReadUInt(buffer, max, offset + 1, true);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 4; }
				std::string to_string() const override {
					return "PtgName";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/f9eba5de-1ff6-4d52-9753-f9c1e446c774
			// ptg=0x39 or 0x59 or 0x79
			// The PtgNameX structure specifies a reference to a defined name in an external workbook.
			class PtgNameX : public PtgSubType_ixti {
			private:
				PtgNameX(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType_ixti::Parse(buffer, offset, max); }
				unsigned int nameindex;
			public:
				static PtgNameX* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgNameX* ans = new PtgNameX(buffer, offset, max);
					ans->nameindex = common::ReadUInt(buffer, max, offset + 3, true);
					return ans;
				}
				unsigned int size() const override { return PtgSubType_ixti::size() + 4; }
				std::string to_string() const override {
					return "PtgNameX";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/0e49033d-5dc7-40f1-8fca-eb3b8b1c2c91
			// ptg=0x0E
			// The PtgNe structure specifies a binary-value-operator that compares whether the second expression in a binary-value-expression is not equal to the first.
			class PtgNe : public PtgBasic {
			private:
				PtgNe(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgNe* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgNe* ans = new PtgNe(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgNe";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/40e69183-2cd3-4051-87ba-2f3ccb82bcfa
			// ptg=0x1F
			// The PtgNum operand specifies a floating-point value.
			class PtgNum : public PtgBasic {
			private:
				PtgNum(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				double value;
			public:
				static PtgNum* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgNum* ans = new PtgNum(buffer, offset, max);
					ans->value = ReadXNumFromBytes(&buffer[offset + 1]);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 8; }
				std::string to_string() const override {
					return "PtgNum(" + std::to_string(this->value) + ")";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/7a5b73da-c552-4fa7-a4d0-1a36032a5622
			// ptg=0x15
			// The PtgParen display token specifies that parentheses are displayed around the expression in a display-precedence-expression.
			class PtgParen : public PtgBasic {
			private:
				PtgParen(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgParen* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgParen* ans = new PtgParen(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgParen";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/980d459a-e1d2-48c3-b00b-662b029247ce
			// ptg=0x14
			// The PtgPercent structure specifies a unary-operator which divides the expression in a unary-expression by 100.
			class PtgPercent : public PtgBasic {
			private:
				PtgPercent(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgPercent* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgPercent* ans = new PtgPercent(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgPercent";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/e115b216-5dda-4a5b-95d2-cadf0ada9a82
			// ptg=0x07
			// The PtgPower structure specifies a binary-value-operator that raises the first expression in a binary-value-expression to the power of the second.
			class PtgPower : public PtgBasic {
			private:
				PtgPower(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgPower* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgPower* ans = new PtgPower(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgPower";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/f5ef334a-bc47-41ce-ba5d-096373423fab
			// ptg=0x11
			// The PtgRange structure specifies the range operation, where the minimum bounding rectangle of the first expression and the second expression is generated.
			class PtgRange : public PtgBasic {
			private:
				PtgRange(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgRange* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgRange* ans = new PtgRange(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgRange";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/fc7c380b-d793-4219-a897-e47e13c4e055
			// ptg=0x24 or 0x44 or 0x64
			// The PtgRef operand specifies a reference to a single cell as an RgceLoc.
			class PtgRef : public PtgSubType {
			private:
				PtgRef(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				RgceLoc loc;
			public:
				static PtgRef* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgRef* ans = new PtgRef(buffer, offset, max);
					ans->loc.Parse(buffer, offset + 1, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 4; }
				std::string to_string() const override {
					return "PtgRef(" + this->loc.to_string() + ")";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/1ca817be-8df3-4b80-8d35-46b5eb753577
			// ptg=0x3A or 0x5A or 0x7A
			// The PtgRef3d operand specifies a reference to a single cell on one or more sheets.
			class PtgRef3d : public PtgSubType_ixti {
			private:
				PtgRef3d(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType_ixti::Parse(buffer, offset, max); }
				RgceLoc loc;
			public:
				static PtgRef3d* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgRef3d* ans = new PtgRef3d(buffer, offset, max);
					ans->loc.Parse(buffer, offset + 3, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType_ixti::size() + 4; }
				std::string to_string() const override {
					std::ostringstream ss;
					ss << "PtgRef3d(" << this->loc.to_string() << ")";
					return ss.str();					
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/d86972da-19ea-4a6e-a71d-49129e930521
			// ptg=0x2A or 0x4A or 0x6A
			// The PtgRefErr operand specifies an invalid reference to a cell.
			class PtgRefErr : public PtgSubType {
			private:
				PtgRefErr(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				unsigned short unused1;
				unsigned short unused2;
			public:
				static PtgRefErr* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgRefErr* ans = new PtgRefErr(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 4; }
				std::string to_string() const override {
					return "PtgRefErr";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/307f13db-e5d2-4b35-8309-d5452908a2d4
			// ptg=0x3C or 0x5C or 0x7C
			// The PtgRefErr3d operand specifies an invalid reference to a cell on one or more sheets. If the formula (section 2.2.2) containing this structure is part of a revision as specified in the Formulas overview (section 2.2.2), then there MUST be a RevExtern in the RgbExtra corresponding to this PtgRefErr3d, which specifies those sheets.
			class PtgRefErr3d : public PtgSubType_ixti {
			private:
				PtgRefErr3d(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType_ixti::Parse(buffer, offset, max); }
				unsigned short unused1;
				unsigned short unused2;
			public:
				static PtgRefErr3d* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgRefErr3d* ans = new PtgRefErr3d(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType_ixti::size() + 4; }
				std::string to_string() const override {
					return "PtgRefErr3d";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/bf3b872b-ba11-4489-a94a-e3937f1bb032
			// ptg=0x2C or 0x4C or 0x6C
			// The PtgRefN operand specifies a reference to a single cell as an RgceLocRel.
			class PtgRefN : public PtgSubType {
			private:
				PtgRefN(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgSubType::Parse(buffer, offset, max); }
				RgceLocRel loc;
			public:
				static PtgRefN* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgRefN* ans = new PtgRefN(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgSubType::size() + 4; }
				std::string to_string() const override {
					return "PtgRefN";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/87c2a057-705c-4473-a168-6d5fac4a9eba
			// ptg=0x17
			// The PtgStr operand specifies a Unicode string value.
			class PtgStr : public PtgBasic {
			private:
				PtgStr(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				std::string string;
			public:
				static PtgStr* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgStr* ans = new PtgStr(buffer, offset, max);
					ans->string = ShortXLUnicodeString::Read(buffer, offset + 1).string;
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 2 + this->string.length(); }
				std::string to_string() const override {
					return "PtgStr(\"" + this->string + "\")";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/ee15a1fa-77bb-45e1-8c8c-0e7bef7f7552
			// ptg=0x04
			// The PtgSub structure specifies a binary-value operator that subtracts the second expression in a binary-value-expression from the first.
			class PtgSub : public PtgBasic {
			private:
				PtgSub(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgSub* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgSub* ans = new PtgSub(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgSub";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/aa0ebf5c-29d2-4ec5-8639-46f844e7647d
			// ptg=0x18
			// The PtgSxName structure specifies a reference to a calculated field or a calculated item found in a PivotParsedFormula. The Rgce that contains this Ptg MUST be part of the formula field of an SxFmla record.
			class PtgSxName : public PtgBasic_elf {
			private:
				PtgSxName(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic_elf::Parse(buffer, offset, max); }
				unsigned int sxIndex;
			public:
				static PtgSxName* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgSxName* ans = new PtgSxName(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgSxName";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/5b2a3be1-7d98-4632-ac94-671c44d442c7
			// ptg=0x02
			// The PtgTbl structure specifies that the Rgce that contains this PtgTbl is part of a data table (1) or an ObjectParsedFormula.
			class PtgTbl : public PtgBasic {
			private:
				PtgTbl(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
				unsigned short row;
				unsigned short col;
			public:
				static PtgTbl* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgTbl* ans = new PtgTbl(buffer, offset, max);
					return ans;
				}
				unsigned int size() const override { return PtgBasic::size() + 4; }
				std::string to_string() const override {
					return "PtgTbl";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/350feab7-1a62-4668-8052-d58c880a3fd2
			// ptg=0x13
			// The PtgUminus structure specifies a unary-operator which generates the additive inverse of a unary-expression.
			class PtgUminus : public PtgBasic {
			private:
				PtgUminus(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgUminus* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgUminus* ans = new PtgUminus(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgUminus";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/90d54742-4776-4271-a08c-39bd73b7b8fc
			// ptg=0x10
			// The PtgUnion structure specifies a binary-reference-operator that specifies a union of the first expression in a binary-reference-expression with the second.
			class PtgUnion : public PtgBasic {
			private:
				PtgUnion(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgUnion* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgUnion* ans = new PtgUnion(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgUnion";
				}
			};

			// see: https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/635159b0-7811-4c5b-b89f-97e9ec02d6af
			// ptg=0x12
			// The PtgUplus structure specifies a unary-operator which leaves a unary-expression unchanged.
			class PtgUplus : public PtgBasic {
			private:
				PtgUplus(unsigned char* buffer, unsigned int offset, unsigned int max) { PtgBasic::Parse(buffer, offset, max); }
			public:
				static PtgUplus* Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
					PtgUplus* ans = new PtgUplus(buffer, offset, max);
					return ans;
				}
				std::string to_string() const override {
					return "PtgUplus";
				}
			};


			static std::vector<Ptg*> Parse(unsigned char* buffer, unsigned int offset, unsigned int max) {
				std::vector<Ptg*> list;
				unsigned int bytesRead = 0;

				while (offset + bytesRead < max) {
					Ptg* child = nullptr;

					unsigned char ptgType = buffer[offset + bytesRead];

					switch (ptgType) {
					case 0x01: child = PtgExp::Parse(buffer, offset + bytesRead, max); break;
					case 0x02: child = PtgTbl::Parse(buffer, offset + bytesRead, max); break;
					case 0x03: child = PtgAdd::Parse(buffer, offset + bytesRead, max); break;
					case 0x04: child = PtgSub::Parse(buffer, offset + bytesRead, max); break;
					case 0x05: child = PtgMul::Parse(buffer, offset + bytesRead, max); break;
					case 0x06: child = PtgDiv::Parse(buffer, offset + bytesRead, max); break;
					case 0x07: child = PtgPower::Parse(buffer, offset + bytesRead, max); break;
					case 0x08: child = PtgConcat::Parse(buffer, offset + bytesRead, max); break;
					case 0x09: child = PtgLt::Parse(buffer, offset + bytesRead, max); break;
					case 0x0A: child = PtgLe::Parse(buffer, offset + bytesRead, max); break;
					case 0x0B: child = PtgEq::Parse(buffer, offset + bytesRead, max); break;
					case 0x0C: child = PtgGe::Parse(buffer, offset + bytesRead, max); break;
					case 0x0D: child = PtgGt::Parse(buffer, offset + bytesRead, max); break;
					case 0x0E: child = PtgNe::Parse(buffer, offset + bytesRead, max); break;
					case 0x0F: child = PtgIsect::Parse(buffer, offset + bytesRead, max); break;
					case 0x10: child = PtgUnion::Parse(buffer, offset + bytesRead, max); break;
					case 0x11: child = PtgRange::Parse(buffer, offset + bytesRead, max); break;
					case 0x12: child = PtgUplus::Parse(buffer, offset + bytesRead, max); break;
					case 0x13: child = PtgUminus::Parse(buffer, offset + bytesRead, max); break;
					case 0x14: child = PtgPercent::Parse(buffer, offset + bytesRead, max); break;
					case 0x15: child = PtgParen::Parse(buffer, offset + bytesRead, max); break;
					case 0x16: child = PtgMissArg::Parse(buffer, offset + bytesRead, max); break;
					case 0x17: child = PtgStr::Parse(buffer, offset + bytesRead, max); break;
					case 0x18:
					{
						unsigned char subType = buffer[offset + bytesRead + 1];
						bytesRead++;
						switch (subType) {
						case 0x01: child = PtgElfLel::Parse(buffer, offset + bytesRead, max); break;
						case 0x02: child = PtgElfRw::Parse(buffer, offset + bytesRead, max); break;
						case 0x03: child = PtgElfCol::Parse(buffer, offset + bytesRead, max); break;
						case 0x06: child = PtgElfRwV::Parse(buffer, offset + bytesRead, max); break;
						case 0x07: child = PtgElfColV::Parse(buffer, offset + bytesRead, max); break;
						case 0x0A: child = PtgElfRadical::Parse(buffer, offset + bytesRead, max); break;
						case 0x0B: child = PtgElfRadicalS::Parse(buffer, offset + bytesRead, max); break;
						case 0x0D: child = PtgElfColS::Parse(buffer, offset + bytesRead, max); break;
						case 0x0F: child = PtgElfColSV::Parse(buffer, offset + bytesRead, max); break;
						case 0x10: child = PtgElfRadicalLel::Parse(buffer, offset + bytesRead, max); break;
						case 0x1D: child = PtgSxName::Parse(buffer, offset + bytesRead, max); break;
						default: child = new PtgUnknown(ptgType, subType); break;
						}
						break;
					}
					case 0x19:
					{
						unsigned char subType = buffer[offset + bytesRead + 1];
						bytesRead++;
						switch (subType) {
						case 0x01: child = PtgAttrSemi::Parse(buffer, offset + bytesRead, max); break;
						case 0x02: child = PtgAttrIf::Parse(buffer, offset + bytesRead, max); break;
						case 0x04: child = PtgAttrChoose::Parse(buffer, offset + bytesRead, max); break;
						case 0x08: child = PtgAttrGoto::Parse(buffer, offset + bytesRead, max); break;
						case 0x10: child = PtgAttrSum::Parse(buffer, offset + bytesRead, max); break;
						case 0x20:
						case 0x21:
							child = PtgAttrBaxcel::Parse(buffer, offset + bytesRead, max); break;
						case 0x40: child = PtgAttrSpace::Parse(buffer, offset + bytesRead, max); break;
						case 0x41: child = PtgAttrSpaceSemi::Parse(buffer, offset + bytesRead, max); break;
						default: child = new PtgUnknown(ptgType, subType); break;
						}
						break;
					}
					case 0x1C: child = PtgErr::Parse(buffer, offset + bytesRead, max); break;
					case 0x1D: child = PtgBool::Parse(buffer, offset + bytesRead, max); break;
					case 0x1E: child = PtgInt::Parse(buffer, offset + bytesRead, max); break;
					case 0x1F: child = PtgNum::Parse(buffer, offset + bytesRead, max); break;
					case 0x20:
					case 0x40:
					case 0x60:
						child = PtgArray::Parse(buffer, offset + bytesRead, max); break;
					case 0x21:
					case 0x41:
					case 0x61:
						child = PtgFunc::Parse(buffer, offset + bytesRead, max); break;
					case 0x22:
					case 0x42:
					case 0x62:
						child = PtgFuncVar::Parse(buffer, offset + bytesRead, max); break;
					case 0x23:
					case 0x43:
					case 0x63:
						child = PtgName::Parse(buffer, offset + bytesRead, max); break;
					case 0x24:
					case 0x44:
					case 0x64:
						child = PtgRef::Parse(buffer, offset + bytesRead, max); break;
					case 0x25:
					case 0x45:
					case 0x65:
						child = PtgArea::Parse(buffer, offset + bytesRead, max); break;
					case 0x26:
					case 0x46:
					case 0x66:
						child = PtgMemArea::Parse(buffer, offset + bytesRead, max); break;
					case 0x27:
					case 0x47:
					case 0x67:
						child = PtgMemErr::Parse(buffer, offset + bytesRead, max); break;
					case 0x28:
					case 0x48:
					case 0x68:
						child = PtgMemNoMem::Parse(buffer, offset + bytesRead, max); break;
					case 0x29:
					case 0x49:
					case 0x69:
						child = PtgMemFunc::Parse(buffer, offset + bytesRead, max); break;
					case 0x2A:
					case 0x4A:
					case 0x6A:
						child = PtgRefErr::Parse(buffer, offset + bytesRead, max); break;
					case 0x2B:
					case 0x4B:
					case 0x6B:
						child = PtgAreaErr::Parse(buffer, offset + bytesRead, max); break;
					case 0x2C:
					case 0x4C:
					case 0x6C:
						child = PtgRefN::Parse(buffer, offset + bytesRead, max); break;
					case 0x2D:
					case 0x4D:
					case 0x6D:
						child = PtgAreaN::Parse(buffer, offset + bytesRead, max); break;
					case 0x39:
					case 0x59:
					case 0x79:
						child = PtgNameX::Parse(buffer, offset + bytesRead, max); break;
					case 0x3A:
					case 0x5A:
					case 0x7A:
						child = PtgRef3d::Parse(buffer, offset + bytesRead, max); break;
					case 0x3B:
					case 0x5B:
					case 0x7B:
						child = PtgArea3d::Parse(buffer, offset + bytesRead, max); break;
					case 0x3C:
					case 0x5C:
					case 0x7C:
						child = PtgRefErr3d::Parse(buffer, offset + bytesRead, max); break;
					case 0x3D:
					case 0x5D:
					case 0x7D:
						child = PtgAreaErr3d::Parse(buffer, offset + bytesRead, max); break;

					default: child = new PtgUnknown(ptgType, 0); break;
					}

					bytesRead += child->size();
					list.push_back(child);
				}

				return list;
			}
		}
	}
}


